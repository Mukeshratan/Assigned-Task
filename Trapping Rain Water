class Solution {
    public static int trap(int[] height) {
        int n = height.length;
        if (n == 0)
            return 0; // No bars, no water

        // Arrays to store the maximum heights to the left and right of each bar
        int[] leftMax = new int[n];
        int[] rightMax = new int[n];

        // Fill the leftMax array
        leftMax[0] = height[0];
        for (int i = 1; i < n; i++) {
            leftMax[i] = Math.max(leftMax[i - 1], height[i]);
        }

        // Fill the rightMax array
        rightMax[n - 1] = height[n - 1];
        for (int i = n - 2; i >= 0; i--) {
            rightMax[i] = Math.max(rightMax[i + 1], height[i]);
        }

        // Calculate the water trapped at each position
        int totalWater = 0;
        for (int i = 0; i < n; i++) {
            // Water trapped at index i
            totalWater += Math.min(leftMax[i], rightMax[i]) - height[i];
        }

        return totalWater;
    }

    public static void main(String[] args) {
        // Test cases
        int[] height1 = { 0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1 };
        System.out.println("Trapped water: " + trap(height1)); // Output: 6

        int[] height2 = { 4, 2, 0, 3, 2, 5 };
        System.out.println("Trapped water: " + trap(height2)); // Output: 9
    }
}
